(judges[, 'j2dem'] == 1)*(judges[, 'j2black'] == 0) +
(judges[, 'j3dem'] == 1)*(judges[, 'j3black'] == 0)
table(judges[, 'num_nb_demcol'], useNA = 'ifany')
# Indicator for one non-black Democratic colleague.
judges[, 'one_nb_demcol'] <- judges[, 'num_nb_demcol'] == 1
table(judges[, 'one_nb_demcol'], useNA = 'ifany')
# Indicator for two non-black Democratic colleagues.
judges[, 'two_nb_demcol'] <- judges[, 'num_nb_demcol'] == 2
table(judges[, 'two_nb_demcol'], useNA = 'ifany')
# Number of black Democratic colleagues.
judges[, 'num_b_demcol'] <-
(judges[, 'j2dem'] == 1)*(judges[, 'j2black'] == 1) +
(judges[, 'j3dem'] == 1)*(judges[, 'j3black'] == 1)
table(judges[, 'num_b_demcol'], useNA = 'ifany')
# Indicator for one black Democratic colleague.
judges[, 'one_b_demcol'] <- judges[, 'num_b_demcol'] == 1
table(judges[, 'one_b_demcol'], useNA = 'ifany')
# Indicator for whether a white judge has a black
# colleague on the panel.
judges[, 'wht_w_blk_col'] <- !judges[, 'j1black'] & judges[, 'blackcol']
# Set missing for black judges.
judges[judges[, 'j1black'], 'wht_w_blk_col'] <- NA
table(judges[, 'wht_w_blk_col'], useNA = 'ifany')
table(judges[, 'j1black'],
judges[, 'wht_w_blk_col'], useNA = 'ifany')
#-------------------------------------------------
# Variables for Figure 1.
#-------------------------------------------------
# Variables at the case level.
dem_vars <- sprintf('j%ddem', seq(3))
cases[, 'num_dem'] <- rowSums(cases[, dem_vars])
table(cases[, 'num_dem'], useNA = 'ifany')
black_vars <- sprintf('j%dblack', seq(3))
cases[, 'num_black'] <- rowSums(cases[, black_vars])
table(cases[, 'num_black'], useNA = 'ifany')
# Create an indicator for racial composition of the panel.
cases[, 'WWW_panel'] <- cases[, 'num_black'] == 0
table(cases[, 'WWW_panel'], useNA = 'ifany')
##################################################
# Summary Statistics
##################################################
#-------------------------------------------------
# Case level
#-------------------------------------------------
# Tabulate voting rates by case.
table(cases[, 'panelvote'], useNA = 'ifany')
# Estimate the mean voting rate by
# number of judges for each political affiliation.
DR_panel_vote_mean <- rep(NA, 4)
DR_panel_vote_se <- rep(NA, 4)
for (num_dem_index in seq(1, 4)) {
num_dems <- num_dem_index - 1
sel_rows <- cases[, 'num_dem'] == 3 - num_dems
sel_panel_votes <- cases[sel_rows, 'panelvote']
DR_panel_vote_mean[num_dem_index] <- mean(sel_panel_votes, na.rm = TRUE)
DR_panel_vote_se[num_dem_index] <- sd(sel_panel_votes, na.rm = TRUE) /
sqrt(sum(!is.na(sel_panel_votes)))
}
DR_panel_vote_mean
DR_panel_vote_se
# Estimate the mean voting rate by
# number of judges for each political affiliation.
WB_panel_vote_mean <- rep(NA, 2)
WB_panel_vote_se <- rep(NA, 2)
for (num_WB_index in seq(1, 2)) {
is_WWW_panel <- !as.logical(num_WB_index - 1)
sel_rows <- cases[, 'WWW_panel'] == is_WWW_panel
sel_panel_votes <- cases[sel_rows, 'panelvote']
WB_panel_vote_mean[num_WB_index] <- mean(sel_panel_votes, na.rm = TRUE)
WB_panel_vote_se[num_WB_index] <- sd(sel_panel_votes, na.rm = TRUE) /
sqrt(sum(!is.na(sel_panel_votes)))
}
WB_panel_vote_mean
WB_panel_vote_se
# Collect into a vector for Figure 1A.
panel_vote_mean <- 100*c(DR_panel_vote_mean, WB_panel_vote_mean)
panel_vote_se <- 100*c(DR_panel_vote_se, WB_panel_vote_se)
#-------------------------------------------------
# Judge level
#-------------------------------------------------
# Estimate the mean voting rate by
# judges of each political affiliation.
DR_ind_vote_mean <- rep(NA, 2)
DR_ind_vote_se <- rep(NA, 2)
for (num_DR_index in seq(1, 2)) {
is_D_judge <- !as.logical(num_DR_index - 1)
sel_rows <- judges[, 'j1dem'] == is_D_judge
sel_ind_votes <- judges[sel_rows, 'j1vote']
DR_ind_vote_mean[num_DR_index] <- mean(sel_ind_votes, na.rm = TRUE)
DR_ind_vote_se[num_DR_index] <- sd(sel_ind_votes, na.rm = TRUE) /
sqrt(sum(!is.na(sel_ind_votes)))
}
DR_ind_vote_mean
DR_ind_vote_se
# Estimate the mean voting rate by
# judges of each racial group.
WB_ind_vote_mean <- rep(NA, 2)
WB_ind_vote_se <- rep(NA, 2)
for (num_WB_index in seq(1, 2)) {
is_B_judge <- !as.logical(num_WB_index - 1)
sel_rows <- judges[, 'j1black'] == is_B_judge
sel_ind_votes <- judges[sel_rows, 'j1vote']
WB_ind_vote_mean[num_WB_index] <- mean(sel_ind_votes, na.rm = TRUE)
WB_ind_vote_se[num_WB_index] <- sd(sel_ind_votes, na.rm = TRUE) /
sqrt(sum(!is.na(sel_ind_votes)))
}
WB_ind_vote_mean
WB_ind_vote_se
# Estimate the mean voting rate by white judges depending on
# whether they have a black colleague on the panel.
WwBC_ind_vote_mean <- rep(NA, 2)
WwBC_ind_vote_se <- rep(NA, 2)
for (num_WwBC_index in seq(1, 2)) {
is_WwBC_judge <- !as.logical(num_WwBC_index - 1)
sel_rows <- judges[, 'wht_w_blk_col'] == is_WwBC_judge
sel_ind_votes <- judges[sel_rows, 'j1vote']
WwBC_ind_vote_mean[num_WwBC_index] <- mean(sel_ind_votes, na.rm = TRUE)
WwBC_ind_vote_se[num_WwBC_index] <- sd(sel_ind_votes, na.rm = TRUE) /
sqrt(sum(!is.na(sel_ind_votes)))
}
WwBC_ind_vote_mean
WwBC_ind_vote_se
# Collect into a vector for Figure 1A.
ind_vote_mean <- 100*c(DR_ind_vote_mean, WB_ind_vote_mean, WwBC_ind_vote_mean[c(2,1)])
ind_vote_se <- 100*c(DR_ind_vote_se, WB_ind_vote_se, WwBC_ind_vote_se[c(2,1)])
mean.vector.case
panel_vote_mean
se.vector.case
panel_vote_se
mean.vector.ind
ind_vote_mean
se.vector.ind
ind_vote_se
panel_vote_se
WwBC_ind_vote_se
table(cases[, 'WWW_panel'], useNA = 'ifany')
table(judges[, 'j1black'],
judges[, 'wht_w_blk_col'], useNA = 'ifany')
judges[, 'j1black']
judges[judges[, 'j1black'] == 1, 'wht_w_blk_col'] <- NA
table(judges[, 'wht_w_blk_col'], useNA = 'ifany')
table(judges[, 'j1black'], useNA = 'ifany')
judges[, 'wht_w_blk_col'] <- !judges[, 'j1black'] & judges[, 'blackcol']
# Set missing for black judges.
judges[judges[, 'j1black'] == 1, 'wht_w_blk_col'] <- NA
table(judges[, 'wht_w_blk_col'], useNA = 'ifany')
table(judges[, 'j1black'],
judges[, 'wht_w_blk_col'], useNA = 'ifany')
WwBC_ind_vote_mean
WwBC_ind_vote_se
WwBC_ind_vote_mean <- rep(NA, 2)
WwBC_ind_vote_se <- rep(NA, 2)
for (num_WwBC_index in seq(1, 2)) {
is_WwBC_judge <- !as.logical(num_WwBC_index - 1)
sel_rows <- judges[, 'wht_w_blk_col'] == is_WwBC_judge
sel_ind_votes <- judges[sel_rows, 'j1vote']
WwBC_ind_vote_mean[num_WwBC_index] <- mean(sel_ind_votes, na.rm = TRUE)
WwBC_ind_vote_se[num_WwBC_index] <- sd(sel_ind_votes, na.rm = TRUE) /
sqrt(sum(!is.na(sel_ind_votes)))
}
WwBC_ind_vote_mean
WwBC_ind_vote_se
ind_vote_mean <- 100*c(DR_ind_vote_mean, WB_ind_vote_mean, WwBC_ind_vote_mean[c(2,1)])
ind_vote_se <- 100*c(DR_ind_vote_se, WB_ind_vote_se, WwBC_ind_vote_se[c(2,1)])
ind_vote_mean
ind_vote_se
y_label_panel <- c("DDD", "DDR", "RRD", "RRR", "All NB", "At least\none B")
y_panel <- c(length(panel_vote_mean):1)
point.size <- 1.4
y_label_ind <- c("Dems.", "Reps.", "Blacks", "Non-\nblacks", "No", "Yes")
y_ind <- c(length(ind_vote_mean):1)
# pdf("Figure1_A.pdf", height =8, width=11)
fig_file_name <- 'Figure1_A.pdf'
fig_path <- sprintf('Figures/%s', fig_file_name)
pdf(fig_path, height = 8, width = 11)
getwd()
pdf(fig_path, height = 8, width = 11)
a.size <- 1.4
# Store default plotting parameters and replace later.
old_par <- par()
# Panel-level in left plot
par(mfrow=c(1,2), mar = c(4,7.5,2,1.5))
plot(panel_vote_mean, y_panel, axes = F, xlim = c(0,100), xlab = "", ylab = "",
main = "", pch = 19, xaxs="i", yaxs="r", cex=point.size)
segments(panel_vote_mean-1.96*panel_vote_se, y_panel, panel_vote_mean+1.96*panel_vote_se,y_panel,)
axis(1, at = seq(0,100,25), mgp=c(2,.5,0), cex.axis =a.size)
axis(2, at = y_panel, labels = y_label_panel, las =1, mgp=c(2,.5,0), cex.axis =a.size, cex.axis =a.size)
mtext("Mean voting rates, case level", 3, line =.5, cex =1.7, font=3)
mtext("Percentage of liberal decisions", 1, line =2, cex =1.4)
mtext("Panel composition", 2, line = 6, cex =1.6, srt =90, font=2)
text(-30,1.5, "By race", srt =90, xpd=T, cex = 1.5, font =1)
text(-30,5, "By party", srt =90, xpd=T, cex = 1.5, font =1)
x.location <- -25
polygon(x=c(x.location,x.location,0,0), y=c(2.2,.75,.75,2.2), xpd=T, lty =2) #put boxes around race/party segments
polygon(x=c(x.location,x.location,0,0), y=c(2.8,6.2,6.2,2.8), xpd=T, lty =2)
box()
# Judge-level in right plot
plot(ind_vote_mean, y_ind, axes = F, xlim = c(0,100), xlab = "", ylab = "",
main = "", pch = 19, xaxs="i", yaxs="r", cex=point.size)
segments(ind_vote_mean-1.96*ind_vote_se, y_ind, ind_vote_mean+1.96*ind_vote_se,y_ind,)
axis(1, at = seq(0,100,25), mgp=c(2,.5,0), cex.axis =a.size)
axis(2, at = y_ind, labels = y_label_ind, las =1, mgp=c(2,.5,0), cex.axis =a.size)
mtext("Mean voting rates, individual level", 3, line =.5, cex =1.7, font=3, adj=1)
mtext("Percentage of liberal votes", 1, line =2, cex =1.4)
mtext("Judge type", 2, line = 6, cex =1.6, srt =90, font=2)
text(-30,1.5, "Non-blacks, with\na black colleague?", srt =90, xpd=T, cex = 1.5, font =1)
text(-30,5, "All cases", srt =90, xpd=T, cex = 1.5, font =1)
polygon(x=c(-20,-20,0,0), y=c(2.2,.8,.8,2.2), xpd=T, lty =2) #put boxes around race/party segments
polygon(x=c(-22,-22,0,0), y=c(2.8,6.2,6.2,2.8), xpd=T, lty =2)
box()
dev.off()
par(old_par)
12000*(1-0.22)*(1-0.15)
12000*(1-0.22)*(1-0.15)*0.4
1*(1-0.22)*(1-0.15)*0.4
1*(1-0.22)*(1-0.15)
12000*(1-0.22)*(1-0.15)*0.4
12000*(1-0.22)*(1-0.15)*0.6
# It is a good habit to clear the workspace.
rm(list=ls(all=TRUE))
# Pause on each graph.
par(ask = TRUE)
opar <- par(no.readonly = TRUE)
boxplot(mpg ~ cyl, data = mtcars,
main = "Car Milage Data",
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon")
mtcars$cyl.f <- factor(mtcars$cyl, levels = c(4, 6,
8), labels = c("4", "6", "8"))
mtcars$am.f <- factor(mtcars$am, levels = c(0, 1),
labels = c("auto", "standard"))
boxplot(mpg ~ am.f * cyl.f, data = mtcars,
varwidth = TRUE, col = c("gold", "darkgreen"),
main = "MPG Distribution by Auto Type",
xlab = "Auto Type")
library(vioplot)
x1 <- mtcars$mpg[mtcars$cyl == 4]
x2 <- mtcars$mpg[mtcars$cyl == 6]
x3 <- mtcars$mpg[mtcars$cyl == 8]
vioplot(x1, x2, x3,
names = c("4 cyl", "6 cyl", "8 cyl"),
col = "gold")
dotchart(mtcars$mpg, labels = row.names(mtcars),
cex = 0.7,
main = "Gas Milage for Car Models",
xlab = "Miles Per Gallon")
par(ask = FALSE)
boxplot(mpg ~ cyl, data = mtcars,
main = "Car Milage Data",
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon")
boxplot(mpg ~ am.f * cyl.f, data = mtcars,
varwidth = TRUE, col = c("gold", "darkgreen"),
main = "MPG Distribution by Auto Type",
xlab = "Auto Type")
x1 <- mtcars$mpg[mtcars$cyl == 4]
x2 <- mtcars$mpg[mtcars$cyl == 6]
x3 <- mtcars$mpg[mtcars$cyl == 8]
vioplot(x1, x2, x3,
names = c("4 cyl", "6 cyl", "8 cyl"),
col = "gold")
title("Violin Plots of Miles Per Gallon")
dotchart(mtcars$mpg, labels = row.names(mtcars),
cex = 0.7,
main = "Gas Milage for Car Models",
xlab = "Miles Per Gallon")
x <- mtcars[order(mtcars$mpg), ]
# Create a factor and assign color names
# by the levels of the factor.
x$cyl <- factor(x$cyl)
x$color[x$cyl == 4] <- "red"
x$color[x$cyl == 6] <- "blue"
x$color[x$cyl == 8] <- "darkgreen"
# Now plot the dotchart.
dotchart(x$mpg, labels = row.names(x), cex = 0.7,
pch = 19, groups = x$cyl,
gcolor = "black", color = x$color,
main = "Gas Milage for Car Models\ngrouped by cylinder",
xlab = "Miles Per Gallon")
attach(mtcars)
plot(wt, mpg,
main="Basic Scatterplot of MPG vs. Weight",
xlab="Car Weight (lbs/1000)",
ylab="Miles Per Gallon ", pch=19)
abline(lm(mpg ~ wt), col="red", lwd=2, lty=1)
lines(lowess(wt, mpg), col="blue", lwd=2, lty=2)
pairs(~ mpg + disp + drat + wt, data=mtcars,
main="Basic Scatterplot Matrix")
library(car)
scatterplotMatrix(~ mpg + disp + drat + wt, data=mtcars, spread=FALSE,
lty.smooth=2, main="Scatterplot Matrix via car package")
cor(mtcars[c("mpg", "wt", "disp", "drat")])
library(gclus)
mydata <- mtcars[c(1,3,5,6)]
mydata.corr <- abs(cor(mydata))
mycolors <- dmat.color(mydata.corr)
myorder <- order.single(mydata.corr)
cpairs(mydata,
myorder,
panel.colors=mycolors,
gap=.5,
main="Variables Ordered and Colored by Correlation"
)
myorder
set.seed(1234)
n <- 10000
c1 <- matrix(rnorm(n, mean=0, sd=.5), ncol=2)
c2 <- matrix(rnorm(n, mean=3, sd=2), ncol=2)
mydata <- rbind(c1, c2)
mydata <- as.data.frame(mydata)
names(mydata) <- c("x", "y")
with(mydata,
plot(x, y, pch=19,
main="Scatter Plot with 10000 Observations"))
with(mydata,
smoothScatter(x, y,
main="Scatterplot with Smoothed Density"))
library(hexbin)
with(mydata, {
bin <- hexbin(x, y, xbins=50)
plot(bin, main="Hexagonal Binning (10,000 Observations)")
})
library(IDPmisc)
with(mydata,
iplot(x, y, main="Image Scatter Plot with Color Indicating Density"))
par(opar)
with(mydata, {
bin <- hexbin(x, y, xbins=50)
plot(bin, main="Hexagonal Binning (10,000 Observations)")
})
par(ask = FALSE)
with(mydata,
iplot(x, y, main="Image Scatter Plot with Color Indicating Density"))
library(scatterplot3d)
attach(mtcars)
scatterplot3d(wt, disp, mpg,
main="Basic 3D Scatterplot")
scatterplot3d(wt, disp, mpg,
main="Basic 3D Scatterplot")
scatterplot3d(wt, disp, mpg,
main="Basic 3D Scatterplot")
scatterplot3d(wt, disp, mpg,
pch=16,
highlight.3d=TRUE,
type="h",
main="3D Scatterplot with Vertical Lines")
s3d <-scatterplot3d(wt, disp, mpg,
pch=16,
highlight.3d=TRUE,
type="h",
main="3D Scatter Plot with Verical Lines and Regression Plane")
fit <- lm(mpg ~ wt+disp)
# Add it to the plot object s3d created above.
s3d$plane3d(fit)
detach(mtcars)
library(rgl)
attach(mtcars)
plot3d(wt, disp, mpg, col="red", size=5)
rgl.open()
library(Rcmdr)
attach(mtcars)
scatter3d(wt, disp, mpg)
attach(mtcars)
r <- sqrt(disp/pi)
symbols(wt, mpg, r, inches=0.30, fg="white", bg="lightblue",
main="Bubble Plot with point size proportional to displacement",
ylab="Miles Per Gallon",
xlab="Weight of Car (lbs/1000)")
par(opar)
attach(mtcars)
r <- sqrt(disp/pi)
symbols(wt, mpg, r, inches=0.30, fg="white", bg="lightblue",
main="Bubble Plot with point size proportional to displacement",
ylab="Miles Per Gallon",
xlab="Weight of Car (lbs/1000)")
text(wt, mpg, rownames(mtcars), cex=0.6)
detach(mtcars)
par(mfrow=c(1,2))
t1 <- subset(Orange, Tree==1)
plot(t1$age, t1$circumference,
xlab="Age (days)",
ylab="Circumference (mm)",
main="Orange Tree 1 Growth")
plot(t2$age, t2$circumference,
xlab="Age (days)",
ylab="Circumference (mm)",
main="Orange Tree 2 Growth",
type="b")
t2
subset(Orange, Tree==2)
t1
t2 <- subset(Orange, Tree==2)
plot(t2$age, t2$circumference,
xlab="Age (days)",
ylab="Circumference (mm)",
main="Orange Tree 2 Growth",
type="b")
# Calculate the parameters for the plot axes.
Orange$Tree <- as.numeric(Orange$Tree)
ntrees <- max(Orange$Tree)
xrange <- range(Orange$age)
yrange <- range(Orange$circumference)
plot(xrange, yrange,
type="n",
xlab="Age (days)",
ylab="Circumference (mm)"
)
par(ask = FALSE)
Orange$Tree <- as.numeric(Orange$Tree)
ntrees <- max(Orange$Tree)
xrange <- range(Orange$age)
yrange <- range(Orange$circumference)
plot(xrange, yrange,
type="n",
xlab="Age (days)",
ylab="Circumference (mm)"
)
colors <- rainbow(ntrees)
linetype <- c(1:ntrees)
plotchar <- seq(18, 18+ntrees, 1)
# Now loop through the tree numbers.
for (i in 1:ntrees) {
tree <- subset(Orange, Tree==i)
lines(tree$age, tree$circumference,
type="b",
lwd=2,
lty=linetype[i],
col=colors[i],
pch=plotchar[i]
)
}
title("Tree Growth", "example of line plot")
legend(# 'topright',
xrange[1], yrange[2],
legend = 1:ntrees,
cex=0.75,
col=colors,
pch=plotchar,
lty=linetype,
title="Tree"
)
options(digits=2)
cor(mtcars)
library(corrgram)
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlogram of mtcar intercorrelations")
corrgram(mtcars, order=TRUE, lower.panel=panel.ellipse,
upper.panel=panel.pts, text.panel=panel.txt,
diag.panel=panel.minmax,
main="Correlogram of mtcar data using scatterplots and ellipses")
corrgram(mtcars, lower.panel=panel.shade,
upper.panel=NULL, text.panel=panel.txt,
main="Car Mileage Data (unsorted)")
col.corrgram <- function(ncol){
colorRampPalette(c("darkgoldenrod4", "burlywood1",
"darkkhaki", "darkgreen"))(ncol)}
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="A Corrgram (or Horse) of a Different Color")
# Create the two series.
x <- c(1:5)
y <- c(1:5)
# Split the "Plot" pane into a 2x4 grid.
par(mfrow=c(2,4))
# Generate a list of type options for the plots.
types <- c("p", "l", "o", "b", "c", "s", "S", "h")
for (i in types){
plottitle <- paste("type=", i)
plot(x,y,type=i, col="red", lwd=2, cex=1, main=plottitle)
}
ftable(Titanic)
library(vcd)
mosaic(Titanic, shade=TRUE, legend=TRUE)
# Clear workspace.
rm(list=ls(all=TRUE))
setwd("~/Teaching/UCF_BA_Capstones/QMB6912_Spring_2023/GitHub/QMB6912S23/demo_05/Tractor_Data_Vis/Code")
setwd("~/Teaching/UCF_BA_Capstones/QMB6912_Spring_2023/GitHub/QMB6912S23/demo_05/Tractor_Data_Vis")
# Clear workspace.
rm(list=ls(all=TRUE))
data_dir <- 'Data'
# Set directory for storing figures.
fig_dir <- 'Figures'
# Set directory for storing tables.
tab_dir <- 'Tables'
# Library for smoothing density estimates.
library(sm)
# Library for Visualizing Categorical Data
library(vcd)
library(gclus)
# Library for creating code for LaTeX tables.
library(xtable)
in_file_name <- sprintf('%s/%s', data_dir, 'TRACTOR7.csv')
tractor_sales <- read.csv(file = in_file_name)
# Inspect the contents.
print('Summary of tractor_sales Dataset:')
print(summary(tractor_sales))
# Generate a new variable log_saleprice.
tractor_sales[, 'log_saleprice'] <- log(tractor_sales[, 'saleprice'])
##################################################
# Relative histogram and density of saleprice.
print('Plotting histogram and density of log saleprice.')
##################################################
hist(tractor_sales[, 'log_saleprice'],
main = 'Histogram and Density of Log. Tractor Prices',
xlab = 'Price',
col = 'red',
probability = TRUE)
rug(tractor_sales[, 'log_saleprice'])
lines(density(tractor_sales[, 'log_saleprice']),
col = 'blue',
lwd = 3)
